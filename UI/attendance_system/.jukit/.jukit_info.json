{"cmd": "import os\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\nimport torch\nfrom transformers import ViTImageProcessor, ViTForImageClassification\nfrom sklearn.model_selection import train_test_split\n\nclass Vit:\n    def __init__(self, src_dir='../../train_folder/train_img/'):\n        # Init\n        self.src_dir = src_dir\n        # Load model\n        self.device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n        self.processor = ViTImageProcessor.from_pretrained('google/vit-base-patch16-224')\n        self.model = ViTForImageClassification.from_pretrained('google/vit-base-patch16-224').to(self.device)\n        self.model.eval()\n        # Lay cac class trong data\n        self.classes = {img_class: idx for idx, img_class in enumerate(os.listdir(src_dir))}\n\n        # chuan bi data cho train\n        self.data = {'images': [], 'labels': []}\n\n    def load_data(self):\n        paths_images = []\n        for img_class in os.listdir(self.src_dir):\n            class_dir = os.path.join(self.src_dir, img_class)\n            for img in os.listdir(class_dir):\n                path_image = os.path.join(class_dir, img)\n                paths_images.append(path_image)\n       \n        for path_image in paths_images:\n            img = cv2.imread(path_image)\n            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n            self.data['images'].append(img)\n            class_name = os.path.basename(os.path.dirname(path_image))\n            self.data['labels'].append(self.classes[class_name])\n        print(f\"Loaded {len(self.data['images'])} images and {len(self.data['labels'])} labels.\")\n\n    def train_test_split(self):\n        self.train_images, self.test_images, self.train_labels, self.test_labels = train_test_split(\n            self.data['images'], self.data['labels'], test_size=0.2, random_state=42\n        )\n\n    def cosine_similarity(self, query_vector, src_vectors):\n        query_vector = np.squeeze(query_vector) # shape (1, 768) -> (768,)\n        dot_product = np.dot(src_vectors, query_vector) # shape (N, 768) * (768,) -> (N,)\n        src_norm = np.linalg.norm(src_vectors, axis=1) # shape (N,)\n        query_norm = np.linalg.norm(query_vector)\n        cosine_similarity = dot_product / (src_norm * query_norm) # shape (N,)\n        return cosine_similarity\n\n    def preprocessing(self, images):\n        if isinstance(images, list):\n            inputs = self.processor(images, return_tensors='pt').to(self.device)\n        else:\n            inputs = self.processor(images, return_tensors='pt').to(self.device)\n        with torch.no_grad():\n            outputs = self.model(**inputs, output_hidden_states=True).hidden_states[-1][:, 0, :].detach().cpu().numpy()\n        return outputs\n\n    def ranking(self, preprocessed_query_image, preprocessed_src_images, top_k=10):\n        scores = self.cosine_similarity(preprocessed_query_image, preprocessed_src_images)\n        ranked_list = np.argsort(scores)[::-1][:top_k]\n        scores = scores[ranked_list]\n        return ranked_list, scores\n    \n    def train(self, is_split=False, is_train=False, is_save=True):\n        train_images = self.data['images']\n        train_labels = self.data['labels']\n        if is_split:\n            self.train_test_split()\n            train_images = self.train_images\n            train_labels = self.train_labels\n        else:\n            self.train_images = self.data['images']\n            self.train_labels = self.data['labels']\n        \n        if is_train:\n            print(\"Preprocessing data...\")\n            preprocessed_train_images = self.preprocessing(train_images)\n        else:\n            if os.path.exists('data_images_preprocessed.npy'):\n                return np.load('data_images_preprocessed.npy')\n            else:\n                raise FileNotFoundError(\"Preprocessed data file not found. Run with is_train=True and is_save=True first.\")\n        \n        if is_save:\n            np.save('data_images_preprocessed.npy', preprocessed_train_images)\n            np.save('train_labels.npy', np.array(train_labels))  # Lưu nhãn để sử dụng sau\n            print(\"Preprocessed data saved to 'data_images_preprocessed.npy' and labels to 'train_labels.npy'\")\n        else:\n            print(\"Preprocessed data not saved.\")\n        return preprocessed_train_images\n\n    def reference(self, queries_img, data_images_preprocessed):\n        query_images_preprocessed = self.preprocessing(queries_img)\n        ranked_list, scores = self.ranking(query_images_preprocessed, data_images_preprocessed)\n        return ranked_list, scores  \n\n    def visualize(self, query_image, data_images_preprocessed):\n        preprocessed_query_image = self.preprocessing(query_image)\n        ranked_list, scores = self.ranking(preprocessed_query_image, data_images_preprocessed)\n        num_images = len(ranked_list)\n        plt.figure(figsize=(15, 5))\n        for idx, (img_idx, score) in enumerate(zip(ranked_list, scores)):\n            plt.subplot(1, num_images, idx + 1)\n            plt.imshow(self.data['images'][img_idx])\n            plt.title(f'Similarity: {score:.10f}')\n            plt.axis('off')\n            plt.show()\n\nif __name__ == '__main__':\n    src_dir = os.path.join('..', '..', 'train_folder', 'train_img')\n    #src_dir = '../../train_folder/train_img/'\n    classes = {img_class: idx for idx, img_class in enumerate(os.listdir(src_dir))}\n    vit = Vit(src_dir=src_dir)\n    vit.load_data()\n    # Neu chua co data preprocessed thi train = True and Save = True, neu muon chia du lieu thi split = True\n    data_images_preprocessed = vit.train(is_split = False, is_train = True, is_save = True)\n    query_image = cv2.imread(os.path.join('..', '..', 'train_folder', 'train_img', 'Long', 'cropped_face_1.jpg'))\n    #query_image = cv2.imread('../../train_folder/train_img/Long/cropped_face_1.jpg')\n    query_image = cv2.cvtColor(query_image, cv2.COLOR_BGR2RGB)\n    # plot the query image\n    print('Query Image')\n    plt.imshow(query_image)\n\n\n    ranked_list, scores = vit.reference(query_image, data_images_preprocessed)\n    print(\"Ranked list:\", ranked_list)\n    print(\"Scores:\", scores)\n    vit.visualize(query_image, data_images_preprocessed)", "import_complete": 1, "terminal": "kitty", "output_complete": 1, "outhist_title": "rFVaU2RBFC", "cmd_opts": " --cell_id=NONE -s", "outhist_cell": "NONE", "is_md": 0}